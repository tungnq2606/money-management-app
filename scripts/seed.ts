#!/usr/bin/env tsx

import * as Crypto from "expo-crypto";
import {
  getBudgetService,
  getCategoryService,
  getNotificationService,
  getTransactionService,
  getUserService,
  getWalletService,
  initializeDatabase,
} from "../database/services";

// Sample data
const sampleUsers = [
  {
    name: "Nguy·ªÖn VƒÉn An",
    email: "an.nguyen@example.com",
    password: "123456",
    birthday: new Date("1990-05-15"),
    phoneNumber: 1234567890,
    address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
  },
  {
    name: "Tr·∫ßn Th·ªã B√¨nh",
    email: "binh.tran@example.com",
    password: "123456",
    birthday: new Date("1995-08-22"),
    phoneNumber: 9876543210,
    address: "456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 3, TP.HCM",
  },
  {
    name: "L√™ Minh C∆∞·ªùng",
    email: "cuong.le@example.com",
    password: "123456",
    birthday: new Date("1988-12-10"),
    phoneNumber: 5555555555,
    address: "789 ƒê∆∞·ªùng DEF, Qu·∫≠n 7, TP.HCM",
  },
];

const sampleWallets = [
  {
    name: "V√≠ Ti·ªÅn M·∫∑t",
    type: "cash",
    amount: 500000,
  },
  {
    name: "Ng√¢n H√†ng ACB",
    type: "bank",
    amount: 2500000,
  },
  {
    name: "Th·∫ª T√≠n D·ª•ng",
    type: "credit",
    amount: -500000,
  },
  {
    name: "V√≠ MoMo",
    type: "e-wallet",
    amount: 300000,
  },
  {
    name: "T√†i Kho·∫£n Ti·∫øt Ki·ªám",
    type: "savings",
    amount: 5000000,
  },
];

const sampleTransactions = [
  // Income transactions
  {
    amount: 15000000,
    type: "income" as const,
    note: "L∆∞∆°ng th√°ng 12/2024",
    categoryName: "Salary",
  },
  {
    amount: 2000000,
    type: "income" as const,
    note: "Th∆∞·ªüng cu·ªëi nƒÉm",
    categoryName: "Salary",
  },
  {
    amount: 500000,
    type: "income" as const,
    note: "B√°n ƒë·ªì c≈©",
    categoryName: "Other Income",
  },

  // Expense transactions
  {
    amount: 800000,
    type: "expense" as const,
    note: "ƒÇn u·ªëng tu·∫ßn n√†y",
    categoryName: "Food & Dining",
  },
  {
    amount: 200000,
    type: "expense" as const,
    note: "XƒÉng xe",
    categoryName: "Transportation",
  },
  {
    amount: 1500000,
    type: "expense" as const,
    note: "Mua qu·∫ßn √°o",
    categoryName: "Shopping",
  },
  {
    amount: 300000,
    type: "expense" as const,
    note: "Xem phim",
    categoryName: "Entertainment",
  },
  {
    amount: 1200000,
    type: "expense" as const,
    note: "Ti·ªÅn ƒëi·ªán n∆∞·ªõc",
    categoryName: "Bills & Utilities",
  },
  {
    amount: 500000,
    type: "expense" as const,
    note: "Kh√°m b·ªánh",
    categoryName: "Healthcare",
  },
  {
    amount: 800000,
    type: "expense" as const,
    note: "H·ªçc ph√≠ kh√≥a h·ªçc",
    categoryName: "Education",
  },
];

const sampleBudgets = [
  {
    name: "Ng√¢n s√°ch ƒÇn u·ªëng",
    amount: 2000000,
    categoryName: "Food & Dining",
    note: "Ng√¢n s√°ch ƒÉn u·ªëng h√†ng th√°ng",
  },
  {
    name: "Ng√¢n s√°ch Mua s·∫Øm",
    amount: 3000000,
    categoryName: "Shopping",
    note: "Ng√¢n s√°ch mua s·∫Øm qu·∫ßn √°o, ƒë·ªì d√πng",
  },
  {
    name: "Ng√¢n s√°ch Gi·∫£i tr√≠",
    amount: 1000000,
    categoryName: "Entertainment",
    note: "Ng√¢n s√°ch gi·∫£i tr√≠, xem phim, du l·ªãch",
  },
  {
    name: "Ng√¢n s√°ch Giao th√¥ng",
    amount: 800000,
    categoryName: "Transportation",
    note: "Ng√¢n s√°ch xƒÉng xe, taxi, grab",
  },
];

const sampleNotifications = [
  {
    content:
      "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Money Manager! H√£y b·∫Øt ƒë·∫ßu qu·∫£n l√Ω t√†i ch√≠nh c·ªßa b·∫°n.",
    link: "/home",
    isRead: false,
  },
  {
    content:
      "B·∫°n ƒë√£ v∆∞·ª£t qu√° ng√¢n s√°ch ƒÇn u·ªëng th√°ng n√†y. H√£y ki·ªÉm so√°t chi ti√™u t·ªët h∆°n!",
    link: "/budget",
    isRead: false,
  },
  {
    content: "Nh·∫Øc nh·ªü: H√≥a ƒë∆°n ƒëi·ªán n∆∞·ªõc s·∫Øp ƒë·∫øn h·∫°n thanh to√°n.",
    link: "/transaction",
    isRead: true,
  },
  {
    content: "B·∫°n c√≥ 1 giao d·ªãch m·ªõi ƒë∆∞·ª£c th√™m v√†o v√≠ Ng√¢n H√†ng ACB.",
    link: "/transaction",
    isRead: true,
  },
];

async function hashPassword(password: string): Promise<string> {
  return await Crypto.digestStringAsync(
    Crypto.CryptoDigestAlgorithm.SHA256,
    password
  );
}

async function createSampleData() {
  try {
    console.log("üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u...");

    // Initialize database
    await initializeDatabase();
    console.log("‚úÖ Database ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o");

    const userService = getUserService();
    const walletService = getWalletService();
    const categoryService = getCategoryService();
    const transactionService = getTransactionService();
    const budgetService = getBudgetService();
    const notificationService = getNotificationService();

    // Create sample users
    console.log("üë• ƒêang t·∫°o users m·∫´u...");
    const createdUsers = [];

    for (const userData of sampleUsers) {
      // Check if user already exists
      const existingUser = userService.getUserByEmail(userData.email);
      if (existingUser) {
        console.log(`‚ö†Ô∏è  User ${userData.email} ƒë√£ t·ªìn t·∫°i, b·ªè qua...`);
        createdUsers.push(existingUser);
        continue;
      }

      const hashedPassword = await hashPassword(userData.password);
      const user = userService.createUser({
        ...userData,
        password: hashedPassword,
      });

      // Create default categories for user
      categoryService.createDefaultCategories(user._id.toString());

      createdUsers.push(user);
      console.log(`‚úÖ ƒê√£ t·∫°o user: ${user.name} (${user.email})`);
    }

    // Create sample wallets for each user
    console.log("üí∞ ƒêang t·∫°o wallets m·∫´u...");
    const allWallets = [];

    for (const user of createdUsers) {
      const userWallets = [];

      for (let i = 0; i < sampleWallets.length; i++) {
        const walletData = sampleWallets[i];
        const currentDate = new Date();
        const nextYear = new Date();
        nextYear.setFullYear(currentDate.getFullYear() + 1);

        const wallet = walletService.createWallet({
          userId: user._id.toString(),
          name: `${walletData.name} - ${user.name}`,
          type: walletData.type,
          amount: walletData.amount,
          fromDate: currentDate,
          toDate: nextYear,
        });

        userWallets.push(wallet);
        allWallets.push(wallet);
      }

      console.log(
        `‚úÖ ƒê√£ t·∫°o ${userWallets.length} wallets cho user: ${user.name}`
      );
    }

    // Create sample transactions
    console.log("üí≥ ƒêang t·∫°o transactions m·∫´u...");
    let transactionCount = 0;

    for (const user of createdUsers) {
      const userWallets = walletService.getWalletsByUserId(user._id.toString());
      const userCategories = categoryService.getCategoriesByUserId(
        user._id.toString()
      );

      if (userWallets.length === 0 || userCategories.length === 0) {
        console.log(
          `‚ö†Ô∏è  User ${user.name} kh√¥ng c√≥ wallets ho·∫∑c categories, b·ªè qua...`
        );
        continue;
      }

      // Create 5-8 random transactions per user
      const numTransactions = Math.floor(Math.random() * 4) + 5;

      for (let i = 0; i < numTransactions; i++) {
        const transactionData =
          sampleTransactions[
            Math.floor(Math.random() * sampleTransactions.length)
          ];
        const randomWallet =
          userWallets[Math.floor(Math.random() * userWallets.length)];
        const category = userCategories.find(
          (cat) => cat.name === transactionData.categoryName
        );

        if (!category) continue;

        // Random date within last 30 days
        const randomDate = new Date();
        randomDate.setDate(
          randomDate.getDate() - Math.floor(Math.random() * 30)
        );

        const transaction = transactionService.createTransaction({
          walletId: randomWallet._id.toString(),
          categoryId: category._id.toString(),
          amount: transactionData.amount,
          type: transactionData.type,
          note: transactionData.note,
        });

        // Update wallet amount
        const newAmount =
          randomWallet.amount +
          (transactionData.type === "income"
            ? transactionData.amount
            : -transactionData.amount);
        walletService.updateWalletAmount(
          randomWallet._id.toString(),
          newAmount
        );

        transactionCount++;
      }

      console.log(
        `‚úÖ ƒê√£ t·∫°o ${numTransactions} transactions cho user: ${user.name}`
      );
    }

    // Create sample budgets
    console.log("üìä ƒêang t·∫°o budgets m·∫´u...");
    let budgetCount = 0;

    for (const user of createdUsers) {
      const userWallets = walletService.getWalletsByUserId(user._id.toString());
      const userCategories = categoryService.getCategoriesByUserId(
        user._id.toString()
      );

      if (userWallets.length === 0 || userCategories.length === 0) continue;

      // Create 2-3 budgets per user
      const numBudgets = Math.floor(Math.random() * 2) + 2;

      for (let i = 0; i < numBudgets; i++) {
        const budgetData =
          sampleBudgets[Math.floor(Math.random() * sampleBudgets.length)];
        const category = userCategories.find(
          (cat) => cat.name === budgetData.categoryName
        );

        if (!category) continue;

        const currentDate = new Date();
        const nextMonth = new Date();
        nextMonth.setMonth(nextMonth.getMonth() + 1);

        // Select 1-2 random wallets
        const selectedWallets = userWallets
          .sort(() => 0.5 - Math.random())
          .slice(0, Math.floor(Math.random() * 2) + 1)
          .map((w) => w._id.toString());

        const budget = budgetService.createBudget({
          name: `${budgetData.name} - ${user.name}`,
          walletId: selectedWallets,
          categoryId: category._id.toString(),
          amount: budgetData.amount,
          remain: budgetData.amount,
          loop: true,
          fromDate: currentDate,
          toDate: nextMonth,
          note: budgetData.note,
        });

        budgetCount++;
      }

      console.log(`‚úÖ ƒê√£ t·∫°o ${numBudgets} budgets cho user: ${user.name}`);
    }

    // Create sample notifications
    console.log("üîî ƒêang t·∫°o notifications m·∫´u...");
    let notificationCount = 0;

    for (const user of createdUsers) {
      for (const notificationData of sampleNotifications) {
        const notification = notificationService.createNotification({
          content: notificationData.content,
          link: notificationData.link,
          time: new Date(),
          isRead: notificationData.isRead,
        });

        notificationCount++;
      }
    }

    console.log(`‚úÖ ƒê√£ t·∫°o ${notificationCount} notifications`);

    // Summary
    console.log("\nüéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!");
    console.log("üìä T·ªïng k·∫øt:");
    console.log(`   üë• Users: ${createdUsers.length}`);
    console.log(`   üí∞ Wallets: ${allWallets.length}`);
    console.log(`   üí≥ Transactions: ${transactionCount}`);
    console.log(`   üìä Budgets: ${budgetCount}`);
    console.log(`   üîî Notifications: ${notificationCount}`);

    console.log("\nüîë Th√¥ng tin ƒëƒÉng nh·∫≠p:");
    for (const user of createdUsers) {
      console.log(`   Email: ${user.email} | Password: 123456`);
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu m·∫´u:", error);
    throw error;
  }
}

async function resetDatabase() {
  try {
    console.log("üóëÔ∏è  ƒêang reset database...");

    // Initialize database
    await initializeDatabase();

    const userService = getUserService();
    const walletService = getWalletService();
    const categoryService = getCategoryService();
    const transactionService = getTransactionService();
    const budgetService = getBudgetService();
    const notificationService = getNotificationService();

    // Get all data
    const users = userService.getAllUsers?.() || [];
    const wallets = walletService.getAllWallets?.() || [];
    const categories = categoryService.getAllCategories?.() || [];
    const transactions = transactionService.getAllTransactions?.() || [];
    const budgets = budgetService.getAllBudgets?.() || [];
    const notifications = notificationService.getAllNotifications?.() || [];

    // Delete all data
    for (const transaction of transactions) {
      transactionService.deleteTransaction(transaction._id.toString());
    }

    for (const budget of budgets) {
      budgetService.deleteBudget(budget._id.toString());
    }

    for (const wallet of wallets) {
      walletService.deleteWallet(wallet._id.toString());
    }

    for (const category of categories) {
      categoryService.deleteCategory(category._id.toString());
    }

    for (const notification of notifications) {
      notificationService.deleteNotification(notification._id.toString());
    }

    for (const user of users) {
      userService.deleteUser(user._id.toString());
    }

    console.log("‚úÖ ƒê√£ reset database th√†nh c√¥ng!");
  } catch (error) {
    console.error("‚ùå L·ªói khi reset database:", error);
    throw error;
  }
}

// Main execution
async function main() {
  const command = process.argv[2];

  try {
    switch (command) {
      case "init":
        await createSampleData();
        break;
      case "reset":
        await resetDatabase();
        break;
      default:
        console.log("üìñ C√°ch s·ª≠ d·ª•ng:");
        console.log("   npm run seed:init  - T·∫°o d·ªØ li·ªáu m·∫´u");
        console.log("   npm run seed:reset - Reset to√†n b·ªô database");
        break;
    }
  } catch (error) {
    console.error("‚ùå L·ªói:", error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

export { createSampleData, resetDatabase };
